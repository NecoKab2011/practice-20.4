{"mappings":"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","sources":["<anon>","src/index.js","src/js/app.js","src/js/get-posts.js","src/js/create-posts.js","src/js/update-posts.js","src/js/delete-posts.js","src/js/comment-posts.js"],"sourcesContent":["async function $4514372253c9dfa4$export$3790dc04c854c4c9() {\n    try {\n        const response = await fetch(\"http://localhost:3000/posts\");\n        if (!response.ok) throw new Error(\"\\u041D\\u0435 \\u0432\\u0434\\u0430\\u043B\\u043E\\u0441\\u044F \\u043E\\u0442\\u0440\\u0438\\u043C\\u0430\\u0442\\u0438 \\u043F\\u043E\\u0441\\u0442\\u0438\");\n        return await response.json();\n    } catch (error) {\n        console.log(error);\n        return [];\n    }\n}\n\n\nasync function $e34c2a62a57429bb$export$e1bef8d96c7ba086(title, content) {\n    try {\n        const response = await fetch(\"http://localhost:3000/posts\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                title: title,\n                content: content,\n                comments: []\n            })\n        });\n        if (!response.ok) throw new Error(\"\\u041D\\u0435 \\u0432\\u0434\\u0430\\u043B\\u043E\\u0441\\u044F \\u0441\\u0442\\u0432\\u043E\\u0440\\u0438\\u0442\\u0438 \\u043F\\u043E\\u0441\\u0442\");\n        return await response.json();\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\nasync function $c5b80780e4949e78$export$431458ae9af46678(id, userName, title, content) {\n    try {\n        const response = await fetch(`http://localhost:3000/posts/${id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                userName: userName,\n                title: title,\n                content: content\n            })\n        });\n        if (!response.ok) throw new Error(\"\\u041D\\u0435 \\u0432\\u0434\\u0430\\u043B\\u043E\\u0441\\u044F \\u043E\\u043D\\u043E\\u0432\\u0438\\u0442\\u0438 \\u043F\\u043E\\u0441\\u0442\");\n        return await response.json();\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\nasync function $3a6755dfc2b2df6f$export$6ca2c30598d1bf61(id) {\n    try {\n        const response = await fetch(`http://localhost:3000/posts/${id}`, {\n            method: \"DELETE\"\n        });\n        if (!response.ok) throw new Error(\"\\u041D\\u0435 \\u0432\\u0434\\u0430\\u043B\\u043E\\u0441\\u044F \\u0432\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438 \\u043F\\u043E\\u0441\\u0442\");\n        return true;\n    } catch (error) {\n        console.log(error);\n        return false;\n    }\n}\n\n\nconst $0a6c603df565ba73$var$baseURL = \"http://localhost:3000/posts\";\nasync function $0a6c603df565ba73$export$1cab2cf04e810197(postId, commentText) {\n    try {\n        const res = await fetch(`${$0a6c603df565ba73$var$baseURL}/${postId}`);\n        const post = await res.json();\n        const comments = Array.isArray(post.comments) ? post.comments : [];\n        const newComment = {\n            text: commentText\n        };\n        comments.push(newComment);\n        await fetch(`${$0a6c603df565ba73$var$baseURL}/${postId}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                comments: comments\n            })\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\nconst $388b617130f03bd4$var$postsList = document.querySelector(\"#postsContainer\");\nconst $388b617130f03bd4$var$createPostForm = document.querySelector(\"#createPostForm\");\nconst $388b617130f03bd4$var$titleInput = document.querySelector(\"#titleInput\");\nconst $388b617130f03bd4$var$contentInput = document.querySelector(\"#contentInput\");\nasync function $388b617130f03bd4$var$renderPosts() {\n    const posts = await (0, $4514372253c9dfa4$export$3790dc04c854c4c9)();\n    $388b617130f03bd4$var$postsList.innerHTML = \"\";\n    posts.forEach((post)=>{\n        const commentsHTML = Array.isArray(post.comments) ? post.comments.map((comment)=>`<li>${comment.text}</li>`).join(\"\") : \"\";\n        const li = document.createElement(\"li\");\n        li.innerHTML = `\n        <h2 class=\"user-name\">${post.userName || \"\"}</h2>\n        <h2 class=\"user-title\">${post.title}</h2>\n        <p class=\"user-content\">${post.content}</p>\n        <button class=\"edit-post-btn\" id=\"editPostButton\" data-id=\"${post.id}\">\\u{420}\\u{435}\\u{434}\\u{430}\\u{433}\\u{443}\\u{432}\\u{430}\\u{442}\\u{438}</button>\n        <button class=\"delete-post-btn\" id=\"deletePostButton\" data-id=\"${post.id}\">\\u{412}\\u{438}\\u{434}\\u{430}\\u{43B}\\u{438}\\u{442}\\u{438}</button>\n        <div>\n          <h3>\\u{41A}\\u{43E}\\u{43C}\\u{435}\\u{43D}\\u{442}\\u{430}\\u{440}\\u{456}:</h3>\n          <ul>\n            ${commentsHTML}\n          </ul>\n          <form class=\"create-comment-form\" id=\"createcommentForm\" data-id=\"${post.id}\">\n            <input type=\"text\" class=\"comment-input\" id=\"commentInput\" placeholder=\"\\u{41D}\\u{43E}\\u{432}\\u{438}\\u{439} \\u{43A}\\u{43E}\\u{43C}\\u{435}\\u{43D}\\u{442}\\u{430}\\u{440}\" required>\n            <button type=\"submit\" class=\"add-comment-btn\" id=\"addCommentButton\">\\u{414}\\u{43E}\\u{434}\\u{430}\\u{442}\\u{438} \\u{43A}\\u{43E}\\u{43C}\\u{435}\\u{43D}\\u{442}\\u{430}\\u{440}</button>\n          </form>\n        </div>\n      `;\n        $388b617130f03bd4$var$postsList.appendChild(li);\n    });\n}\n$388b617130f03bd4$var$createPostForm.addEventListener(\"submit\", async (e)=>{\n    e.preventDefault();\n    const title = $388b617130f03bd4$var$titleInput.value.trim();\n    const content = $388b617130f03bd4$var$contentInput.value.trim();\n    if (title && content) {\n        await (0, $e34c2a62a57429bb$export$e1bef8d96c7ba086)(title, content);\n        await $388b617130f03bd4$var$renderPosts();\n        $388b617130f03bd4$var$createPostForm.reset();\n    }\n});\n$388b617130f03bd4$var$postsList.addEventListener(\"click\", async (e)=>{\n    if (e.target.classList.contains(\"delete-post-btn\")) {\n        const id = e.target.dataset.id;\n        await (0, $3a6755dfc2b2df6f$export$6ca2c30598d1bf61)(id);\n        await $388b617130f03bd4$var$renderPosts();\n    }\n    if (e.target.classList.contains(\"edit-post-btn\")) {\n        const id = e.target.dataset.id;\n        const newName = prompt(\"\\u041D\\u043E\\u0432\\u0435 \\u0456\\u043C\\u044F:\");\n        const newTitle = prompt(\"\\u041D\\u043E\\u0432\\u0438\\u0439 \\u0437\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043E\\u043A:\");\n        const newContent = prompt(\"\\u041D\\u043E\\u0432\\u0438\\u0439 \\u0437\\u043C\\u0456\\u0441\\u0442:\");\n        if (newTitle && newContent) {\n            await (0, $c5b80780e4949e78$export$431458ae9af46678)(id, newName, newTitle, newContent);\n            await $388b617130f03bd4$var$renderPosts();\n        }\n    }\n});\n$388b617130f03bd4$var$postsList.addEventListener(\"submit\", async (e)=>{\n    if (e.target.classList.contains(\"create-comment-form\")) {\n        e.preventDefault();\n        const postId = e.target.dataset.id;\n        const input = e.target.querySelector(\".comment-input\");\n        const commentText = input.value.trim();\n        if (commentText) {\n            await (0, $0a6c603df565ba73$export$1cab2cf04e810197)(postId, commentText);\n            await $388b617130f03bd4$var$renderPosts();\n        }\n    }\n});\n$388b617130f03bd4$var$renderPosts();\n\n\n\n\n//# sourceMappingURL=practice-20.4.42e5e7bf.js.map\n","import \"./js/app\"","import { getPosts } from \"./get-posts.js\";\r\nimport { createPost } from \"./create-posts.js\";\r\nimport { updatePost } from \"./update-posts.js\";\r\nimport { deletePost } from \"./delete-posts.js\";\r\nimport { addComment } from \"./comment-posts.js\";\r\n\r\nconst postsList = document.querySelector(\"#postsContainer\");\r\nconst createPostForm = document.querySelector(\"#createPostForm\");\r\nconst titleInput = document.querySelector(\"#titleInput\");\r\nconst contentInput = document.querySelector(\"#contentInput\");\r\n\r\nasync function renderPosts() {\r\n  const posts = await getPosts();\r\n  postsList.innerHTML = \"\";\r\n\r\n  posts.forEach((post) => {\r\n    const commentsHTML = Array.isArray(post.comments)\r\n      ? post.comments.map((comment) => `<li>${comment.text}</li>`).join(\"\")\r\n      : \"\";\r\n\r\n    const li = document.createElement(\"li\");\r\n    li.innerHTML = `\r\n        <h2 class=\"user-name\">${post.userName || \"\"}</h2>\r\n        <h2 class=\"user-title\">${post.title}</h2>\r\n        <p class=\"user-content\">${post.content}</p>\r\n        <button class=\"edit-post-btn\" id=\"editPostButton\" data-id=\"${\r\n          post.id\r\n        }\">Редагувати</button>\r\n        <button class=\"delete-post-btn\" id=\"deletePostButton\" data-id=\"${\r\n          post.id\r\n        }\">Видалити</button>\r\n        <div>\r\n          <h3>Коментарі:</h3>\r\n          <ul>\r\n            ${commentsHTML}\r\n          </ul>\r\n          <form class=\"create-comment-form\" id=\"createcommentForm\" data-id=\"${\r\n            post.id\r\n          }\">\r\n            <input type=\"text\" class=\"comment-input\" id=\"commentInput\" placeholder=\"Новий коментар\" required>\r\n            <button type=\"submit\" class=\"add-comment-btn\" id=\"addCommentButton\">Додати коментар</button>\r\n          </form>\r\n        </div>\r\n      `;\r\n    postsList.appendChild(li);\r\n  });\r\n}\r\n\r\ncreatePostForm.addEventListener(\"submit\", async (e) => {\r\n  e.preventDefault();\r\n  const title = titleInput.value.trim();\r\n  const content = contentInput.value.trim();\r\n  if (title && content) {\r\n    await createPost(title, content);\r\n    await renderPosts();\r\n    createPostForm.reset();\r\n  }\r\n});\r\n\r\npostsList.addEventListener(\"click\", async (e) => {\r\n  if (e.target.classList.contains(\"delete-post-btn\")) {\r\n    const id = e.target.dataset.id;\r\n    await deletePost(id);\r\n    await renderPosts();\r\n  }\r\n  if (e.target.classList.contains(\"edit-post-btn\")) {\r\n    const id = e.target.dataset.id;\r\n    const newName = prompt(\"Нове імя:\");\r\n    const newTitle = prompt(\"Новий заголовок:\");\r\n    const newContent = prompt(\"Новий зміст:\");\r\n    if (newTitle && newContent) {\r\n      await updatePost(id, newName, newTitle, newContent);\r\n      await renderPosts();\r\n    }\r\n  }\r\n});\r\n\r\npostsList.addEventListener(\"submit\", async (e) => {\r\n  if (e.target.classList.contains(\"create-comment-form\")) {\r\n    e.preventDefault();\r\n    const postId = e.target.dataset.id;\r\n    const input = e.target.querySelector(\".comment-input\");\r\n    const commentText = input.value.trim();\r\n    if (commentText) {\r\n      await addComment(postId, commentText);\r\n      await renderPosts();\r\n    }\r\n  }\r\n});\r\nrenderPosts();\r\n","export async function getPosts() {\r\n  try {\r\n    const response = await fetch(\"http://localhost:3000/posts\");\r\n    if (!response.ok) {\r\n      throw new Error(\"Не вдалося отримати пости\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n}\r\n","export async function createPost(title, content) {\r\n  try {\r\n    const response = await fetch(\"http://localhost:3000/posts\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        title: title,\r\n        content: content,\r\n        comments: [],\r\n      }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Не вдалося створити пост\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n","export async function updatePost(id, userName, title, content) {\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/posts/${id}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ userName, title, content }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Не вдалося оновити пост\");\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n","export async function deletePost(id) {\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/posts/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Не вдалося видалити пост\");\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return false;\r\n  }\r\n}\r\n","const baseURL = \"http://localhost:3000/posts\";\r\n\r\nexport async function addComment(postId, commentText) {\r\n  try {\r\n    const res = await fetch(`${baseURL}/${postId}`);\r\n    const post = await res.json();\r\n\r\n    const comments = Array.isArray(post.comments) ? post.comments : [];\r\n\r\n    const newComment = { text: commentText };\r\n    comments.push(newComment);\r\n\r\n    await fetch(`${baseURL}/${postId}`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ comments }),\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n"],"names":["$4514372253c9dfa4$export$3790dc04c854c4c9","response","fetch","ok","Error","json","error","console","log","$e34c2a62a57429bb$export$e1bef8d96c7ba086","title","content","method","headers","body","JSON","stringify","comments","$c5b80780e4949e78$export$431458ae9af46678","id","userName","$3a6755dfc2b2df6f$export$6ca2c30598d1bf61","$0a6c603df565ba73$var$baseURL","$0a6c603df565ba73$export$1cab2cf04e810197","postId","commentText","res","post","Array","isArray","push","text","$388b617130f03bd4$var$postsList","document","querySelector","$388b617130f03bd4$var$createPostForm","$388b617130f03bd4$var$titleInput","$388b617130f03bd4$var$contentInput","$388b617130f03bd4$var$renderPosts","posts","innerHTML","forEach","commentsHTML","map","comment","join","li","createElement","appendChild","addEventListener","e","preventDefault","value","trim","reset","target","classList","contains","dataset","newName","prompt","newTitle","newContent","input"],"version":3,"file":"practice-20.4.42e5e7bf.js.map"}